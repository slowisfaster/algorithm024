¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿
¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿

¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿


¿¿¿¿¿¿¿¿¿¿¿
¿¿¿¿¿¿¿¿
¿¿¿¿¿¿¿¿

def preorder(self, root):
	if root:
  		self.traverse_path.append(root.val)
		self.preorder(root.left)
		self.preorder(root.right)

def inorder(self, root):
	if root:
		self.inorder(root.left)
		self.traverse_path.append(root.val)
		self.inorder(root.right)

def postorder(self, root):
	if root:
		self.postorder(root.left)
		self.postorder(root.right)
		self.traverse_path.append(root.val)

¿¿
def recursion(level, param1, param2, ¿):
	#recursion terminator
	if level > MAX_LEVEL:
	process_result
	return
	
        #process logic in current level
        process(level, data..)

        #drill down
        self.recursion(level+1, p1¿)

        #reverse the current level status if needed
¿¿
def divide_conquer(problem, param1, param2¿):
	#recursion terminitor
	if problem is None:
	print_result
	return
	#prepare data
	data = prepare_data(problem)
	subproblems = split_problem(problem, data)
	# conquer subproblems
	subresult1 = self.divide_conquer(subproblems[0], p1¿)
	subresult2 = self.divide_conquer(subproblems[1], p1¿)
	subresult3 = self.divide_conquer(subproblems[3], p1..)
	¿
	#process and generate the final result
	result = process_result(subresult1, subresult2, subresult3¿)
	#revert the current level states


¿¿¿¿
left, right = 0, len(array)-1
while left <= right:
	mid = (left + right) // 2
	#find the target!!
   	if array[mid] == target:
		break or return result 
	elif array[mid] < target:
		left = mid +1
	else:
		right = mid - 1

BFS¿¿
def BFS(graph, start, end):
	queue = []
	queue.append([start])
	visited.add(start)

	while queue:
		node = queue.popleft()
		visited.add(node)

		process(node)
		nodes = generate_related_nodes(node)
		queue.push(nodes)

	#other processing work


#DFS code
visited = set()

def dfs(node, visited):
	if node in visited: #terminator
		#already visited
		return

	visited.add(node)

	#process current node here
	¿
	for next_node in node.children():
		if next_node not in visited:
			dfs(next_node, visited)

#¿¿¿¿¿
def DFS(self, tree):
	if tree.root is None:
		return []
	visited, stack = [], [tree.root]

	while stack:
		node = stack.pop()
		visited.add(node)
		process(node)
		nodes = generate_related_nodes(node)
		stack.push(nodes)

	#other processing work

#A*
def AstarSearch(graph, start, end):
    pq = collections.priority_queue()
    pq.append([start])
    visited.add(start)
 
   while pq:
       node = pq.pop()
       visited.add(node)
	
       process(node)
       nodes = generate_related_nodes(node)
       unvisited = [node for node in nodes if node not in visited]
       pq.push(unvisited)

#Trie¿¿¿¿¿
class Trie(object):
   def __init__(self):
	self.root = {}
 	self.end_of_word = "#"
  
   def insert(self, word):
	node = self.root
	for char in word:
		node = node.setdefault(char, {})
	node[self.end_of_word] = self.end_of_word

   def search(self, word):
	node = self.root
	for char in word:
	 	if char not in node:
			return False
  	 	node = node[char]
	return self.end_of_word in node

   def startsWith(self, prefix):
	node = self.root
	for char in prefix:
		if char not in node:
			return False
		node = node[char]
	return True

#¿¿¿
def init(p):
   # for i = 0...n: p[i] = i
   p = [i for i in range(n)]

def union(self, p, i, j):
   p1 = self.parent(p, i)
   p2 = self.parent(p, j)
   p[p1] = p2

def parent(self, p, i):
   root = i
   while p[root] != root:
	root = p[root]
   while p[i] != i:
	x =i; i=p[i]; p[x]=root
   return root
